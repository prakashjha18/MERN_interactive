import asyncHandler from "express-async-handler";
import Flight from "../models/flightModel.js";

/**Creating a CRUD API for flights */

//@desc     Fetch all products
//@route    GET /api/products
//@access   public
export const getFlights = asyncHandler(async (req, res) => {
  const flights = await Flight.find();
  res.json(flights);
});

export const getflightsearch = asyncHandler(async (req, res) => {
  const keyword = req.query.keyword
    ? {
        $or: [
          {
            flightname: {
              $regex: req.query.keyword,
              $options: "i",
            },
          },
          {
            flightno: {
              $regex: req.query.keyword,
              $options: "i",
            },
          },
          {
            from: {
              $regex: req.query.keyword,
              $options: "i",
            },
          },
          {
            to: {
              $regex: req.query.keyword,
              $options: "i",
            },
          },
        ],
      }
    : {};

  const flights = await Flight.find({ ...keyword });
  res.json(flights);
});

export const getFlightById = asyncHandler(async (req, res) => {
  const flight = await Flight.findById(req.params.id);
  if (flight) {
    res.json(flight);
  } else {
    res.status(404);
    throw new Error("Flight Not Found");
  }
});

export const createFlight = asyncHandler(async (req, res) => {
  console.log("THE REQUEST BODY", req.body);
  const Flightlog = 
    /* we will check all the serivce member */
    {
      // flight-log-generate-at-9pm-the-delay-was-because-of-luggage-issue
      luggagehandler: {
        isdelayed: true,
        reason: "Luggage Missing",
        expectedstarttime: new Date('Sun May 16 2021 00:19:32'),
        expectedendtime: new Date('Sun May 16 2021 00:19:32'),
      },
      cabinhandler: {
        isdelayed: false,
        reason: "",
        expectedstarttime: new Date('Sun May 16 2021 00:19:32'),
        expectedendtime: new Date('Sun May 16 2021 00:19:32'),
      },
      rampuphandler: {
        isdelayed: false,
        reason: "",
        expectedstarttime: new Date('Sun May 16 2021 00:19:32'),
        expectedendtime: new Date('Sun May 16 2021 00:19:32'),
      },
    }
  const flight = new Flight({
    flightno: req.body.flight_no,
    flightname: req.body.flight_name,
    flighttype: req.body.flight_type,
    from:req.body.from,
    to:req.body.to,
    delaytime: req.body.delay_time,
    /* flightlog will be generated by the <role>-service crew
     * and won't be created during the flight is created.
     */
    // flightlog: req.body.flight_log,
    isterminal: req.body.is_terminal,
    landingtime: req.body.landing_time,
    takeofftime: req.body.takeoff_time,
    flightlog:Flightlog,
  });
  const createdFlight = await flight.save();

  res.status(200).json(createdFlight);
});

export const updateFlight = asyncHandler(async (req, res) => {
  console.log("THE REQ-BODY", req.body);
  const {
    flight_no,
    flight_name,
    flight_type,
    delay_time,
    is_terminal,
    landing_time,
    takeoff_time,
  } = req.body;

  const flight = await Flight.findById(req.params.id);

  if (flight) {
    flight.flightname = flight_no;
    flight.flightno = flight_name;
    flight.flighttype = flight_type;
    flight.delaytime = delay_time;
    flight.isterminal = is_terminal;
    flight.landingtime = landing_time;
    flight.takeofftime = takeoff_time;

    const updatedFlight = await flight.save();
    res.json(updatedFlight);
  } else {
    res.status(404);
    throw new Error("Flight not found");
  }
});

export const deleteFlight = asyncHandler(async (req, res) => {
  const flight = await Flight.findById(req.params.id);
  if (flight) {
    await flight.remove();
    res.json({ message: "Flight removed removed" });
  } else {
    res.status(404);
    throw new Error("Product not found");
  }
});
